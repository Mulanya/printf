#include "main.h"

void print_buffer(char buffer[], int *buff_ind);

/**
 * _printf - Custom printf function.
 * @format: Format string.
 * Return: Number of characters printed.
 */
int _printf(const char *format, ...)
{
	int i, printed_chars = 0;
	int flags, width, precision, size, buff_ind = 0;
	va_list list;
	char buffer[BUFF_SIZE];

	if (format == NULL)
		return (-1);

	va_start(list, format);

	for (i = 0; format && format[i] != '\0'; i++)
	{
		if (format[i] != '%')
		{
			buffer[buff_ind++] = format[i];
			if (buff_ind == BUFF_SIZE)
			{
				// Flush the buffer when it reaches its capacity.
				print_buffer(buffer, &buff_ind);
			}
			// Increment the count of characters printed.
			printed_chars++;
		}
		else
		{
			// Flush the buffer before handling the format specifier.
			print_buffer(buffer, &buff_ind);

			// Get the format specifier details.
			flags = get_flags(format, &i);
			width = get_width(format, &i, list);
			precision = get_precision(format, &i, list);
			size = get_size(format, &i);
			++i;

			// Handle the format specifier and update the printed characters count.
			printed_chars += handle_print(format, &i, list, buffer,
				flags, width, precision, size);
			
			// Check for errors in handling the format specifier.
			if (printed_chars == -1)
			{
				va_end(list);
				return (-1);
			}
		}
	}

	// Flush any remaining characters in the buffer.
	print_buffer(buffer, &buff_ind);

	va_end(list);

	// Return the total number of characters printed.
	return (printed_chars);
}

/**
 * print_buffer - Prints the contents of the buffer if it exists.
 * @buffer: Array of characters.
 * @buff_ind: Index at which to add the next character, represents the length.
 */
void print_buffer(char buffer[], int *buff_ind)
{
	if (*buff_ind > 0)
	{
		// Flush the buffer by writing its contents to the standard output.
		write(1, buffer, *buff_ind);
		// Reset the buffer index.
		*buff_ind = 0;
	}
}
